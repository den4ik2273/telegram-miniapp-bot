require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const path = require('path');

const token = process.env.BOT_TOKEN;
const miniAppUrl = process.env.MINIAPP_URL;
const port = process.env.PORT || 3000;

console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('  BOT_TOKEN:', token ? '‚úì —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚úó –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
console.log('  MINIAPP_URL:', miniAppUrl);
console.log('  PORT:', port);

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// –°–æ–∑–¥–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Mini App
const app = express();
app.use(cors());
app.use(express.json());

// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
app.use((req, res, next) => {
  console.log(`üì® ${req.method} ${req.url}`);
  next();
});

app.use(express.static('public'));

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/user-data', (req, res) => {
  const { initData } = req.body;
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å initData
  // –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  
  res.json({
    success: true,
    message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã'
  });
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/get-user-photo', async (req, res) => {
  try {
    const { userId } = req.body;
    
    if (!userId) {
      return res.json({ success: false, error: 'No userId provided' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const photos = await bot.getUserProfilePhotos(userId, { limit: 1 });
    
    if (photos.total_count > 0 && photos.photos.length > 0) {
      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ (—Å–∞–º–æ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ)
      const photo = photos.photos[0];
      // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
      const largestPhoto = photo[photo.length - 1];
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
      const fileLink = await bot.getFileLink(largestPhoto.file_id);
      
      console.log(`üì∏ Got profile photo for user ${userId}: ${fileLink}`);
      
      res.json({
        success: true,
        photoUrl: fileLink
      });
    } else {
      // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
      res.json({
        success: true,
        photoUrl: null
      });
    }
  } catch (error) {
    console.error('Error getting user photo:', error);
    res.json({ success: false, error: error.message });
  }
});

// API endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ Telegram Stars
app.post('/api/create-invoice', async (req, res) => {
  try {
    const { amount, userId } = req.body;
    
    if (!amount || amount < 10) {
      return res.json({ success: false, error: 'Invalid amount' });
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Telegram Stars
    // 1 —Ä—É–±–ª—å = 1 –∑–≤–µ–∑–¥–∞
    const starsAmount = amount;
    
    const invoice = await bot.createInvoiceLink(
      `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amount} ‚ÇΩ`, // title
      `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞`, // description
      `balance_${userId}_${Date.now()}`, // payload
      '', // provider_token (–ø—É—Å—Ç–æ–π –¥–ª—è Stars)
      'XTR', // currency (XTR = Telegram Stars)
      [{ label: `${amount} ‚ÇΩ`, amount: starsAmount }] // prices
    );
    
    console.log(`üí∞ Created invoice for ${amount} stars (${amount} ‚ÇΩ) for user ${userId}`);
    
    res.json({
      success: true,
      invoiceLink: invoice
    });
  } catch (error) {
    console.error('Error creating invoice:', error);
    res.json({ success: false, error: error.message });
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Mini App
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  
  const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Å Mini App.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`;
  
  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App',
          web_app: { url: miniAppUrl }
        }
      ]
    ]
  };
  
  bot.sendMessage(chatId, welcomeMessage, {
    reply_markup: keyboard
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  
  const helpMessage = `
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/app - –û—Ç–∫—Ä—ã—Ç—å Mini App

Mini App - —ç—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä—è–º–æ –≤ Telegram!
  `;
  
  bot.sendMessage(chatId, helpMessage);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /app
bot.onText(/\/app/, (msg) => {
  const chatId = msg.chat.id;
  
  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App',
          web_app: { url: miniAppUrl }
        }
      ]
    ]
  };
  
  bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', {
    reply_markup: keyboard
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
bot.on('successful_payment', (msg) => {
  const chatId = msg.chat.id;
  const payment = msg.successful_payment;
  
  console.log('‚úÖ Successful payment received:', payment);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ invoice_payload
  const payload = payment.invoice_payload;
  const amount = parseInt(payment.total_amount);
  
  bot.sendMessage(chatId, `‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount} ‚ÇΩ\n‚≠ê –°–ø–∏—Å–∞–Ω–æ –∑–≤–µ–∑–¥: ${amount}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout –∑–∞–ø—Ä–æ—Å–∞ (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã)
bot.on('pre_checkout_query', (query) => {
  console.log('üí≥ Pre-checkout query received:', query);
  
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
  bot.answerPreCheckoutQuery(query.id, true)
    .then(() => {
      console.log('‚úÖ Pre-checkout query answered successfully');
    })
    .catch((error) => {
      console.error('‚ùå Error answering pre-checkout query:', error);
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (text && text.startsWith('/')) {
    return;
  }
  
  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (text) {
    bot.sendMessage(chatId, `–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: ${text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`);
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä
app.listen(port, '0.0.0.0', () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üåê Mini App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${miniAppUrl}`);
  console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.error('–û—à–∏–±–∫–∞ polling:', error);
});

