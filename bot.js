require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');

const token = process.env.BOT_TOKEN;
const miniAppUrl = process.env.MINIAPP_URL;
const port = process.env.PORT || 3000;

// ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const ADMIN_ID = 1054768447;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
const adminStates = {};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤ (–Ω–∞–∫—Ä—É—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
const workerStates = {};

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ==========

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function loadUsers() {
  const usersPath = path.join(__dirname, 'users.json');
  if (fs.existsSync(usersPath)) {
    return JSON.parse(fs.readFileSync(usersPath, 'utf8'));
  }
  return { users: {} };
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function saveUsers(usersData) {
  const usersPath = path.join(__dirname, 'users.json');
  fs.writeFileSync(usersPath, JSON.stringify(usersData, null, 2), 'utf8');
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function registerUser(userId, userData) {
  const users = loadUsers();
  
  if (!users.users[userId]) {
    users.users[userId] = {
      id: userId,
      username: userData.username || null,
      first_name: userData.first_name || null,
      last_name: userData.last_name || null,
      registered_at: new Date().toISOString(),
      last_seen: new Date().toISOString()
    };
    saveUsers(users);
    console.log(`üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId} (${userData.first_name})`);
    return true; // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  } else {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
    users.users[userId].last_seen = new Date().toISOString();
    // –û–±–Ω–æ–≤–ª—è–µ–º username –∏ –∏–º—è (–º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
    users.users[userId].username = userData.username || users.users[userId].username;
    users.users[userId].first_name = userData.first_name || users.users[userId].first_name;
    users.users[userId].last_name = userData.last_name || users.users[userId].last_name;
    saveUsers(users);
    return false; // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function getUsersStats() {
  const users = loadUsers();
  const userIds = Object.keys(users.users);
  const totalUsers = userIds.length;
  
  // –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
  const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
  const activeUsers = userIds.filter(userId => {
    const lastSeen = new Date(users.users[userId].last_seen);
    return lastSeen > oneDayAgo;
  }).length;
  
  // –°—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
  const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
  const newUsers = userIds.filter(userId => {
    const registered = new Date(users.users[userId].registered_at);
    return registered > sevenDaysAgo;
  }).length;
  
  return {
    total: totalUsers,
    active24h: activeUsers,
    new7days: newUsers
  };
}

console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('  BOT_TOKEN:', token ? '‚úì —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚úó –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
console.log('  MINIAPP_URL:', miniAppUrl);
console.log('  PORT:', port);

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// –°–æ–∑–¥–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Mini App
const app = express();
app.use(cors());
app.use(express.json());

// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
app.use((req, res, next) => {
  console.log(`üì® ${req.method} ${req.url}`);
  next();
});

app.use(express.static('public'));

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/user-data', (req, res) => {
  const { initData } = req.body;
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å initData
  // –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  
  res.json({
    success: true,
    message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã'
  });
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/get-user-photo', async (req, res) => {
  try {
    const { userId } = req.body;
    
    if (!userId) {
      return res.json({ success: false, error: 'No userId provided' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const photos = await bot.getUserProfilePhotos(userId, { limit: 1 });
    
    if (photos.total_count > 0 && photos.photos.length > 0) {
      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ (—Å–∞–º–æ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ)
      const photo = photos.photos[0];
      // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
      const largestPhoto = photo[photo.length - 1];
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
      const fileLink = await bot.getFileLink(largestPhoto.file_id);
      
      console.log(`üì∏ Got profile photo for user ${userId}: ${fileLink}`);
      
      res.json({
        success: true,
        photoUrl: fileLink
      });
    } else {
      // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
      res.json({
        success: true,
        photoUrl: null
      });
    }
  } catch (error) {
    console.error('Error getting user photo:', error);
    res.json({ success: false, error: error.message });
  }
});

// API endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ Telegram Stars
app.post('/api/create-invoice', async (req, res) => {
  try {
    const { amount, userId } = req.body;
    
    if (!amount || amount < 10) {
      return res.json({ success: false, error: 'Invalid amount' });
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Telegram Stars
    // 1 —Ä—É–±–ª—å = 1 –∑–≤–µ–∑–¥–∞
    const starsAmount = amount;
    
    const invoice = await bot.createInvoiceLink(
      `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amount} ‚ÇΩ`, // title
      `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞`, // description
      `balance_${userId}_${Date.now()}`, // payload
      '', // provider_token (–ø—É—Å—Ç–æ–π –¥–ª—è Stars)
      'XTR', // currency (XTR = Telegram Stars)
      [{ label: `${amount} ‚ÇΩ`, amount: starsAmount }] // prices
    );
    
    console.log(`üí∞ Created invoice for ${amount} stars (${amount} ‚ÇΩ) for user ${userId}`);
    
    res.json({
      success: true,
      invoiceLink: invoice
    });
  } catch (error) {
    console.error('Error creating invoice:', error);
    res.json({ success: false, error: error.message });
  }
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
app.get('/api/products-config', (req, res) => {
  try {
    const configPath = path.join(__dirname, 'products-config.json');
    if (fs.existsSync(configPath)) {
      const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
      res.json(config);
    } else {
      res.json({ products: {} });
    }
  } catch (error) {
    console.error('Error reading products config:', error);
    res.json({ products: {} });
  }
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/get-user-stats', (req, res) => {
  try {
    const { userId } = req.body;
    
    if (!userId) {
      return res.json({ success: false, error: 'No userId provided' });
    }
    
    const userStats = getUserStats(userId);
    
    res.json({
      success: true,
      stats: userStats
    });
  } catch (error) {
    console.error('Error getting user stats:', error);
    res.json({ success: false, error: error.message });
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Mini App
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤
function loadProductsConfig() {
  const configPath = path.join(__dirname, 'products-config.json');
  if (fs.existsSync(configPath)) {
    return JSON.parse(fs.readFileSync(configPath, 'utf8'));
  }
  return { products: {} };
}

function saveProductsConfig(config) {
  const configPath = path.join(__dirname, 'products-config.json');
  fs.writeFileSync(configPath, JSON.stringify(config, null, 2), 'utf8');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function loadUserStats() {
  const statsPath = path.join(__dirname, 'user-stats.json');
  if (fs.existsSync(statsPath)) {
    return JSON.parse(fs.readFileSync(statsPath, 'utf8'));
  }
  return { users: {} };
}

function saveUserStats(stats) {
  const statsPath = path.join(__dirname, 'user-stats.json');
  fs.writeFileSync(statsPath, JSON.stringify(stats, null, 2), 'utf8');
}

function getUserStats(userId) {
  const stats = loadUserStats();
  if (!stats.users[userId]) {
    stats.users[userId] = {
      purchases: 0,
      sales: 0,
      balance: 0
    };
  }
  return stats.users[userId];
}

function updateUserStats(userId, field, value) {
  const stats = loadUserStats();
  if (!stats.users[userId]) {
    stats.users[userId] = {
      purchases: 0,
      sales: 0,
      balance: 0
    };
  }
  stats.users[userId][field] = parseInt(value);
  saveUserStats(stats);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤
function handleWorkerCallback(query) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;
  
  if (data === 'worker_sales') {
    workerStates[userId] = { action: 'edit_sales' };
    bot.sendMessage(chatId, 
      'üì¶ *–ù–∞–∫—Ä—É—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂*\n\n' +
      'üí° –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂:\n\n' +
      '_–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150)_',
      { parse_mode: 'Markdown' }
    );
    bot.answerCallbackQuery(query.id);
  } else if (data === 'worker_purchases') {
    workerStates[userId] = { action: 'edit_purchases' };
    bot.sendMessage(chatId, 
      'üõí *–ù–∞–∫—Ä—É—Ç–∫–∞ –ø–æ–∫—É–ø–æ–∫*\n\n' +
      'üí° –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫:\n\n' +
      '_–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 200)_',
      { parse_mode: 'Markdown' }
    );
    bot.answerCallbackQuery(query.id);
  } else if (data === 'worker_balance') {
    workerStates[userId] = { action: 'edit_balance' };
    bot.sendMessage(chatId, 
      'üí∞ *–ù–∞–∫—Ä—É—Ç–∫–∞ –±–∞–ª–∞–Ω—Å–∞*\n\n' +
      'üí° –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞:\n\n' +
      '_–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50000)_',
      { parse_mode: 'Markdown' }
    );
    bot.answerCallbackQuery(query.id);
  } else if (data === 'worker_refresh') {
    const userStats = getUserStats(userId);
    
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üì¶ –ù–∞–∫—Ä—É—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏', callback_data: 'worker_sales' }],
        [{ text: 'üõí –ù–∞–∫—Ä—É—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data: 'worker_purchases' }],
        [{ text: 'üí∞ –ù–∞–∫—Ä—É—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'worker_balance' }],
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data: 'worker_refresh' }]
      ]
    };
    
    bot.editMessageText(
      '‚ú® *–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π*\n\n' +
      'üìä *–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n' +
      `üõí –ü–æ–∫—É–ø–æ–∫: *${userStats.purchases}*\n` +
      `üì¶ –ü—Ä–æ–¥–∞–Ω–æ: *${userStats.sales}*\n` +
      `üí∞ –ë–∞–ª–∞–Ω—Å: *${userStats.balance} ‚ÇΩ*\n\n` +
      '‚ñº –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:',
      {
        chat_id: chatId,
        message_id: query.message.message_id,
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      }
    );
    bot.answerCallbackQuery(query.id, { text: '‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ!' });
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
bot.onText(/\/admin/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  if (userId !== ADMIN_ID) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    return;
  }
  
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã', callback_data: 'admin_edit_products' }],
      [{ text: 'üìã –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π', callback_data: 'admin_list_changes' }],
      [{ text: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è', callback_data: 'admin_reset_all' }]
    ]
  };
  
  bot.sendMessage(chatId, 
    '‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
    { reply_markup: keyboard, parse_mode: 'Markdown' }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /deadteam –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.onText(/\/deadteam/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  const userStats = getUserStats(userId);
  
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üì¶ –ù–∞–∫—Ä—É—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏', callback_data: 'worker_sales' }],
      [{ text: 'üõí –ù–∞–∫—Ä—É—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data: 'worker_purchases' }],
      [{ text: 'üí∞ –ù–∞–∫—Ä—É—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'worker_balance' }],
      [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data: 'worker_refresh' }]
    ]
  };
  
  bot.sendMessage(chatId, 
    '‚ú® *–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π*\n\n' +
    'üìä *–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n' +
    `üõí –ü–æ–∫—É–ø–æ–∫: *${userStats.purchases}*\n` +
    `üì¶ –ü—Ä–æ–¥–∞–Ω–æ: *${userStats.sales}*\n` +
    `üí∞ –ë–∞–ª–∞–Ω—Å: *${userStats.balance} ‚ÇΩ*\n\n` +
    '‚ñº –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:', 
    { reply_markup: keyboard, parse_mode: 'Markdown' }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Ä–∫–µ—Ä –∫–æ–º–∞–Ω–¥ (–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º)
  if (data.startsWith('worker_')) {
    handleWorkerCallback(query);
    return;
  }
  
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
  if (userId !== ADMIN_ID) {
    bot.answerCallbackQuery(query.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
    return;
  }
  
  if (data === 'admin_edit_products') {
    const keyboard = {
      inline_keyboard: [
        [{ text: 'ID 1-10', callback_data: 'admin_range_1' }],
        [{ text: 'ID 11-20', callback_data: 'admin_range_11' }],
        [{ text: 'ID 21-30', callback_data: 'admin_range_21' }],
        [{ text: 'ID 31-40', callback_data: 'admin_range_31' }],
        [{ text: 'ID 41-50', callback_data: 'admin_range_41' }],
        [{ text: 'ID 51-60', callback_data: 'admin_range_51' }],
        [{ text: 'ID 61-70', callback_data: 'admin_range_61' }],
        [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'admin_back' }]
      ]
    };
    
    bot.editMessageText(
      'üìù *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤*\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω ID —Ç–æ–≤–∞—Ä–æ–≤:',
      {
        chat_id: chatId,
        message_id: query.message.message_id,
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      }
    );
  } else if (data.startsWith('admin_range_')) {
    const startId = parseInt(data.split('_')[2]);
    const endId = startId + 9;
    
    const keyboard = {
      inline_keyboard: []
    };
    
    for (let i = startId; i <= Math.min(endId, 70); i++) {
      keyboard.inline_keyboard.push([
        { text: `–¢–æ–≤–∞—Ä #${i}`, callback_data: `admin_product_${i}` }
      ]);
    }
    keyboard.inline_keyboard.push([{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'admin_edit_products' }]);
    
    bot.editMessageText(
      `üì¶ *–¢–æ–≤–∞—Ä—ã ID ${startId}-${Math.min(endId, 70)}*\n\n` +
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
      {
        chat_id: chatId,
        message_id: query.message.message_id,
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      }
    );
  } else if (data.startsWith('admin_product_')) {
    const productId = data.split('_')[2];
    const config = loadProductsConfig();
    const productConfig = config.products[productId] || {};
    
    const keyboard = {
      inline_keyboard: [
        [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data: `admin_edit_name_${productId}` }],
        [{ text: 'üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É', callback_data: `admin_edit_price_${productId}` }],
        [{ text: 'üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è', callback_data: `admin_reset_${productId}` }],
        [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `admin_range_${Math.floor((parseInt(productId) - 1) / 10) * 10 + 1}` }]
      ]
    };
    
    let statusText = '‚öôÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ #' + productId + '*\n\n';
    if (productConfig.name || productConfig.price) {
      statusText += '*–¢–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:*\n';
      if (productConfig.name) statusText += `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${productConfig.name}\n`;
      if (productConfig.price) statusText += `üí∞ –¶–µ–Ω–∞: ${productConfig.price} ‚ÇΩ\n`;
    } else {
      statusText += '_–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç_\n';
    }
    statusText += '\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:';
    
    bot.editMessageText(statusText, {
      chat_id: chatId,
      message_id: query.message.message_id,
      reply_markup: keyboard,
      parse_mode: 'Markdown'
    });
  } else if (data.startsWith('admin_edit_name_')) {
    const productId = data.split('_')[3];
    adminStates[userId] = { action: 'edit_name', productId: productId };
    
    bot.sendMessage(chatId, 
      `üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ #${productId}:\n\n` +
      '_–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º_',
      { parse_mode: 'Markdown' }
    );
    bot.answerCallbackQuery(query.id);
  } else if (data.startsWith('admin_edit_price_')) {
    const productId = data.split('_')[3];
    adminStates[userId] = { action: 'edit_price', productId: productId };
    
    bot.sendMessage(chatId, 
      `üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ #${productId}:\n\n` +
      '_–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500)_',
      { parse_mode: 'Markdown' }
    );
    bot.answerCallbackQuery(query.id);
  } else if (data.startsWith('admin_reset_')) {
    const productId = data.split('_')[2];
    const config = loadProductsConfig();
    
    if (config.products[productId]) {
      delete config.products[productId];
      saveProductsConfig(config);
      bot.answerCallbackQuery(query.id, { text: '‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã' });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      bot.sendMessage(chatId, `‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ #${productId} —Å–±—Ä–æ—à–µ–Ω—ã`);
    } else {
      bot.answerCallbackQuery(query.id, { text: '–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ' });
    }
  } else if (data === 'admin_list_changes') {
    const config = loadProductsConfig();
    const changedIds = Object.keys(config.products);
    
    if (changedIds.length === 0) {
      bot.editMessageText(
        'üìã *–°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π*\n\n' +
        '_–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç_',
        {
          chat_id: chatId,
          message_id: query.message.message_id,
          parse_mode: 'Markdown'
        }
      );
    } else {
      let text = 'üìã *–°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π*\n\n';
      changedIds.forEach(id => {
        const prod = config.products[id];
        text += `*–¢–æ–≤–∞—Ä #${id}:*\n`;
        if (prod.name) text += `  üìù ${prod.name}\n`;
        if (prod.price) text += `  üí∞ ${prod.price} ‚ÇΩ\n`;
        text += '\n';
      });
      
      bot.editMessageText(text, {
        chat_id: chatId,
        message_id: query.message.message_id,
        parse_mode: 'Markdown'
      });
    }
  } else if (data === 'admin_reset_all') {
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å', callback_data: 'admin_reset_all_confirm' },
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_back' }
        ]
      ]
    };
    
    bot.editMessageText(
      '‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ*\n\n' +
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –í–°–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è?',
      {
        chat_id: chatId,
        message_id: query.message.message_id,
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      }
    );
  } else if (data === 'admin_reset_all_confirm') {
    saveProductsConfig({ products: {} });
    bot.answerCallbackQuery(query.id, { text: '‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã' });
    bot.sendMessage(chatId, '‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã');
  } else if (data === 'admin_back') {
    // –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã', callback_data: 'admin_edit_products' }],
        [{ text: 'üìã –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π', callback_data: 'admin_list_changes' }],
        [{ text: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è', callback_data: 'admin_reset_all' }]
      ]
    };
    
    bot.editMessageText(
      '‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      {
        chat_id: chatId,
        message_id: query.message.message_id,
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      }
    );
  }
  
  bot.answerCallbackQuery(query.id);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const userName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const isNewUser = registerUser(userId, {
    username: msg.from.username,
    first_name: msg.from.first_name,
    last_name: msg.from.last_name
  });
  
  const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ Lolz.Team Market! –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ NFT –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ –Ω–∞—à–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–µ. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;
  
  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å Lolz Market',
          web_app: { url: miniAppUrl }
        }
      ],
      [
        {
          text: 'üì¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–∞–Ω–∞–ª—É',
          url: 'https://t.me/lolzteam'
        }
      ]
    ]
  };
  
  const photoPath = path.join(__dirname, 'public', 'Start.png');
  bot.sendPhoto(chatId, photoPath, { 
    caption: welcomeMessage,
    reply_markup: keyboard 
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  
  const helpMessage = `
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/app - –û—Ç–∫—Ä—ã—Ç—å Mini App
/deadteam - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—è
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)

Mini App - —ç—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä—è–º–æ –≤ Telegram!
  `;
  
  bot.sendMessage(chatId, helpMessage);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.onText(/\/stats/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  if (userId !== ADMIN_ID) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    return;
  }
  
  const stats = getUsersStats();
  
  const statsMessage = `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* ${stats.total}
üü¢ *–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞:* ${stats.active24h}
üÜï *–ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π:* ${stats.new7days}

üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleDateString('ru-RU')} ${new Date().toLocaleTimeString('ru-RU')}
  `;
  
  bot.sendMessage(chatId, statsMessage, { parse_mode: 'Markdown' });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /app
bot.onText(/\/app/, (msg) => {
  const chatId = msg.chat.id;
  
  const keyboard = {
    inline_keyboard: [
      [
        {
          text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App',
          web_app: { url: miniAppUrl }
        }
      ]
    ]
  };
  
  bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', {
    reply_markup: keyboard
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
bot.on('successful_payment', (msg) => {
  const chatId = msg.chat.id;
  const payment = msg.successful_payment;
  
  console.log('‚úÖ Successful payment received:', payment);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ invoice_payload
  const payload = payment.invoice_payload;
  const amount = parseInt(payment.total_amount);
  
  bot.sendMessage(chatId, `‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount} ‚ÇΩ\n‚≠ê –°–ø–∏—Å–∞–Ω–æ –∑–≤–µ–∑–¥: ${amount}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout –∑–∞–ø—Ä–æ—Å–∞ (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã)
bot.on('pre_checkout_query', (query) => {
  console.log('üí≥ Pre-checkout query received:', query);
  
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
  bot.answerPreCheckoutQuery(query.id, true)
    .then(() => {
      console.log('‚úÖ Pre-checkout query answered successfully');
    })
    .catch((error) => {
      console.error('‚ùå Error answering pre-checkout query:', error);
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (text && text.startsWith('/')) {
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Ä–∫–µ—Ä-–¥–∏–∞–ª–æ–≥–æ–≤ (–Ω–∞–∫—Ä—É—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
  if (workerStates[userId]) {
    const state = workerStates[userId];
    const value = parseInt(text);
    
    if (isNaN(value) || value < 0) {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150)');
      return;
    }
    
    if (state.action === 'edit_sales') {
      updateUserStats(userId, 'sales', value);
      bot.sendMessage(chatId, 
        '‚úÖ *–ü—Ä–æ–¥–∞–∂–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*\n\n' +
        `üì¶ –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: *${value}*\n\n` +
        'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /deadteam –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π',
        { parse_mode: 'Markdown' }
      );
      delete workerStates[userId];
      return;
    } else if (state.action === 'edit_purchases') {
      updateUserStats(userId, 'purchases', value);
      bot.sendMessage(chatId, 
        '‚úÖ *–ü–æ–∫—É–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*\n\n' +
        `üõí –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: *${value}*\n\n` +
        'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /deadteam –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π',
        { parse_mode: 'Markdown' }
      );
      delete workerStates[userId];
      return;
    } else if (state.action === 'edit_balance') {
      updateUserStats(userId, 'balance', value);
      bot.sendMessage(chatId, 
        '‚úÖ *–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!*\n\n' +
        `üí∞ –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: *${value} ‚ÇΩ*\n\n` +
        'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /deadteam –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π',
        { parse_mode: 'Markdown' }
      );
      delete workerStates[userId];
      return;
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–¥–∏–∞–ª–æ–≥–æ–≤
  if (userId === ADMIN_ID && adminStates[userId]) {
    const state = adminStates[userId];
    const config = loadProductsConfig();
    
    if (state.action === 'edit_name') {
      if (!config.products[state.productId]) {
        config.products[state.productId] = {};
      }
      config.products[state.productId].name = text;
      saveProductsConfig(config);
      
      bot.sendMessage(chatId, 
        `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ #${state.productId} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n` +
        `–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: *${text}*\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`,
        { parse_mode: 'Markdown' }
      );
      
      delete adminStates[userId];
      return;
    } else if (state.action === 'edit_price') {
      const price = parseInt(text);
      
      if (isNaN(price) || price < 0) {
        bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500)');
        return;
      }
      
      if (!config.products[state.productId]) {
        config.products[state.productId] = {};
      }
      config.products[state.productId].price = price;
      saveProductsConfig(config);
      
      bot.sendMessage(chatId, 
        `‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ #${state.productId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n` +
        `–ù–æ–≤–∞—è —Ü–µ–Ω–∞: *${price} ‚ÇΩ*\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`,
        { parse_mode: 'Markdown' }
      );
      
      delete adminStates[userId];
      return;
    }
  }
  
  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (text) {
    bot.sendMessage(chatId, `–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: ${text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`);
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä
app.listen(port, '0.0.0.0', () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üåê Mini App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${miniAppUrl}`);
  console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.error('–û—à–∏–±–∫–∞ polling:', error);
});

