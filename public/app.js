// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.expand();
tg.ready();

// –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const user = tg.initDataUnsafe?.user;

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let selectedCategory = 'all';
let currentProduct = null;
let userBalance = 0;
let currentFilter = 'random'; // –§–∏–ª—å—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// Products –º–∞—Å—Å–∏–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ gifts-data.js

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function init() {
    loadUserBalance();
    await loadAdminConfig(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    await loadUserStats(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    displayUserInfo();
    renderProducts();
    setupEventListeners();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async function displayUserInfo() {
    const userNameElement = document.getElementById('userName');
    const userAvatarElement = document.getElementById('userAvatar');
    const profileNameElement = document.getElementById('profileName');
    const profileIdElement = document.getElementById('profileId');
    const profileAvatarElement = document.getElementById('profileAvatar');

    if (user) {
        const firstName = user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const lastName = user.last_name || '';
        const fullName = `${firstName} ${lastName}`.trim();
        const initial = firstName[0]?.toUpperCase() || 'üë§';
        
        userNameElement.textContent = fullName;
        
        if (profileNameElement) profileNameElement.textContent = fullName;
        if (profileIdElement) profileIdElement.textContent = `ID: ${user.id}`;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
        const photoUrl = await loadUserPhoto(user.id);
        
        if (photoUrl) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ
            userAvatarElement.innerHTML = `<img src="${photoUrl}" alt="Avatar" class="avatar-img">`;
            if (profileAvatarElement) {
                profileAvatarElement.innerHTML = `<img src="${photoUrl}" alt="Avatar" class="avatar-img">`;
            }
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª
            userAvatarElement.textContent = initial;
            if (profileAvatarElement) {
                profileAvatarElement.textContent = initial;
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function loadAdminConfig() {
    try {
        const response = await fetch('/api/products-config');
        const config = await response.json();
        
        if (config.products && Object.keys(config.products).length > 0) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä–∞–º
            Object.keys(config.products).forEach(productId => {
                const changes = config.products[productId];
                const product = products.find(p => p.id === parseInt(productId));
                
                if (product) {
                    if (changes.name) product.name = changes.name;
                    if (changes.price) product.price = changes.price;
                }
            });
            
            console.log('‚úÖ Admin config applied:', config);
        }
    } catch (error) {
        console.error('Error loading admin config:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserStats() {
    if (!user || !user.id) return;
    
    try {
        const response = await fetch('/api/get-user-stats', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ userId: user.id })
        });
        
        const data = await response.json();
        
        if (data.success && data.stats) {
            updateStatsDisplay(data.stats);
            console.log('üìä User stats loaded:', data.stats);
        }
    } catch (error) {
        console.error('Error loading user stats:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatsDisplay(stats) {
    const purchasesElement = document.getElementById('userPurchases');
    const salesElement = document.getElementById('userSales');
    const balanceProfileElement = document.getElementById('userBalanceProfile');
    
    if (purchasesElement) {
        purchasesElement.textContent = stats.purchases || 0;
    }
    
    if (salesElement) {
        salesElement.textContent = stats.sales || 0;
    }
    
    if (balanceProfileElement) {
        balanceProfileElement.textContent = `${stats.balance || 0} ‚ÇΩ`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ localStorage
function loadUserBalance() {
    if (user && user.id) {
        const savedBalance = localStorage.getItem(`user_balance_${user.id}`);
        userBalance = savedBalance ? parseInt(savedBalance) : 0;
        updateBalanceDisplay();
        console.log('üí∞ Loaded balance:', userBalance, '‚ÇΩ');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ localStorage
function saveUserBalance() {
    if (user && user.id) {
        localStorage.setItem(`user_balance_${user.id}`, userBalance.toString());
        console.log('üíæ Balance saved:', userBalance, '‚ÇΩ');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö
function updateBalanceDisplay() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    const balanceAmountElements = document.querySelectorAll('.balance-amount');
    balanceAmountElements.forEach(el => {
        el.textContent = `${userBalance} ‚ÇΩ`;
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
    const statCards = document.querySelectorAll('.stat-card');
    if (statCards.length >= 3) {
        const balanceStatValue = statCards[2].querySelector('.stat-value');
        if (balanceStatValue) {
            balanceStatValue.textContent = `${userBalance} ‚ÇΩ`;
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserPhoto(userId) {
    try {
        const response = await fetch('/api/get-user-photo', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId })
        });
        
        const data = await response.json();
        
        if (data.success && data.photoUrl) {
            console.log('‚úÖ User photo loaded:', data.photoUrl);
            return data.photoUrl;
        }
        
        return null;
    } catch (error) {
        console.error('Error loading user photo:', error);
        return null;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
function renderProducts(category = 'all') {
    const grid = document.getElementById('productsGrid');
    let filteredProducts = category === 'all' 
        ? [...products] 
        : products.filter(p => p.category === category);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    if (currentFilter === 'cheap') {
        filteredProducts.sort((a, b) => a.price - b.price);
    } else if (currentFilter === 'expensive') {
        filteredProducts.sort((a, b) => b.price - a.price);
    } else if (currentFilter === 'random') {
        // –†–∞–Ω–¥–æ–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        filteredProducts.sort(() => Math.random() - 0.5);
    }
    
    grid.innerHTML = filteredProducts.map(product => `
        <div class="product-card" data-id="${product.id}">
            <div class="product-image-container">
                ${product.image ? `<img src="${product.image}" alt="${product.name}" class="product-nft-image">` : product.icon}
            </div>
            <div class="product-name">${product.name}</div>
            <div class="product-bottom">
                <div class="product-price-value">${product.price} ‚ÇΩ</div>
            </div>
        </div>
    `).join('');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    document.querySelectorAll('.product-card').forEach(card => {
        card.addEventListener('click', () => {
            const id = parseInt(card.dataset.id);
            showProduct(id);
        });
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
function showProduct(productId) {
    currentProduct = products.find(p => p.id === productId);
    if (!currentProduct) return;
    
    document.getElementById('productTitle').textContent = currentProduct.name;
    document.getElementById('productPrice').textContent = `${currentProduct.price} ‚ÇΩ`;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∏–∫–æ–Ω–∫—É
    const productImageEl = document.getElementById('productImage');
    if (currentProduct.image) {
        productImageEl.innerHTML = `<img src="${currentProduct.image}" alt="${currentProduct.name}" class="product-nft-image">`;
    } else {
        productImageEl.textContent = currentProduct.icon;
    }
    
    // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const specsHtml = Object.entries(currentProduct.specs).map(([key, value]) => `
        <div class="spec-item">
            <strong>${key}:</strong>
            <span>${value}</span>
        </div>
    `).join('');
    document.getElementById('productSpecs').innerHTML = specsHtml;
    
    showPage('productPage');
    
    // Haptic feedback
    if (tg.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('light');
    }
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
function showPage(pageId) {
    document.querySelectorAll('.page').forEach(page => {
        page.classList.remove('active');
    });
    document.getElementById(pageId).classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
        if (item.dataset.page === pageId) {
            item.classList.add('active');
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
    if (pageId === 'profilePage') {
        loadUserStats();
    }
    
    // –°–∫—Ä–æ–ª–ª–∏–º –≤–≤–µ—Ä—Ö
    window.scrollTo(0, 0);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.querySelectorAll('.nav-item').forEach(item => {
        item.addEventListener('click', () => {
            const pageId = item.dataset.page;
            if (pageId) showPage(pageId);
            
            if (tg.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('light');
            }
        });
    });
    
    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞
    document.getElementById('backBtn').addEventListener('click', () => {
        showPage('homePage');
    });
    
    document.getElementById('cartBackBtn').addEventListener('click', () => {
        showPage('homePage');
    });
    
    document.getElementById('profileBackBtn').addEventListener('click', () => {
        showPage('homePage');
    });
    
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏
    document.getElementById('buyBtn').addEventListener('click', () => {
        if (currentProduct) {
            tg.showAlert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        }
    });
    
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    document.getElementById('addBalanceBtn').addEventListener('click', () => {
        showPage('addBalancePage');
        resetAddBalancePage();
    });
    
    // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    document.getElementById('settingsBtn').addEventListener('click', () => {
        showPage('profilePage');
        
        if (tg.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('light');
        }
    });
    
    // –ö–Ω–æ–ø–∫–∞ "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫?"
    document.getElementById('howToAddGiftBtn').addEventListener('click', () => {
        openGiftModal();
        
        if (tg.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('light');
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.getElementById('closeGiftModal').addEventListener('click', () => {
        closeGiftModal();
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
    document.getElementById('giftModalOverlay').addEventListener('click', (e) => {
        if (e.target.id === 'giftModalOverlay') {
            closeGiftModal();
        }
    });
    
    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    document.getElementById('addBalanceBackBtn').addEventListener('click', () => {
        showPage('homePage');
    });
    
    // –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    document.getElementById('amountInput').addEventListener('input', (e) => {
        updatePaymentSummary(e.target.value);
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ
        document.querySelectorAll('.quick-amount-btn').forEach(btn => {
            if (btn.dataset.amount !== e.target.value) {
                btn.classList.remove('active');
            }
        });
    });
    
    // –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —Å—É–º–º
    document.querySelectorAll('.quick-amount-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            const amount = btn.dataset.amount;
            document.getElementById('amountInput').value = amount;
            updatePaymentSummary(amount);
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
            document.querySelectorAll('.quick-amount-btn').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
        });
    });
    
    // –§–∏–ª—å—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤
    const filterBtn = document.getElementById('filterBtn');
    const filterDropdown = document.getElementById('filterDropdown');
    const filterText = document.getElementById('filterText');
    
    filterBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        filterBtn.classList.toggle('active');
        filterDropdown.classList.toggle('show');
        
        if (tg.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('light');
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', (e) => {
        if (!filterBtn.contains(e.target) && !filterDropdown.contains(e.target)) {
            filterBtn.classList.remove('active');
            filterDropdown.classList.remove('show');
        }
    });
    
    // –û–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞
    document.querySelectorAll('.filter-option').forEach(option => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º active –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (option.dataset.filter === 'random') {
            option.classList.add('active');
        }
        
        option.addEventListener('click', () => {
            const filter = option.dataset.filter;
            currentFilter = filter;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            const filterNames = {
                'random': '–†–∞–Ω–¥–æ–º–Ω—ã–µ',
                'cheap': '–°–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ',
                'expensive': '–°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ'
            };
            filterText.textContent = filterNames[filter];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –æ–ø—Ü–∏—é
            document.querySelectorAll('.filter-option').forEach(opt => opt.classList.remove('active'));
            option.classList.add('active');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown
            filterBtn.classList.remove('active');
            filterDropdown.classList.remove('show');
            
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            renderProducts();
            
            if (tg.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('medium');
            }
        });
    });
    
    // –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã
    document.getElementById('confirmPaymentBtn').addEventListener('click', () => {
        const amount = parseInt(document.getElementById('amountInput').value);
        if (amount && amount >= 10) {
            createStarsInvoice(amount);
        }
    });
    
    // –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ Telegram
    tg.MainButton.text = "–ó–∞–∫—Ä—ã—Ç—å";
    tg.MainButton.onClick(() => {
        tg.close();
    });
    tg.MainButton.show();
}

// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
function applyTheme() {
    const root = document.documentElement;
    
    if (tg.themeParams) {
        if (tg.themeParams.bg_color) {
            root.style.setProperty('--tg-bg', tg.themeParams.bg_color);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–±—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
document.addEventListener('click', (e) => {
    if (e.target.tagName === 'BUTTON' || e.target.closest('button')) {
        if (tg.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('light');
        }
    }
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Splash Screen
function hideSplashScreen() {
    const splashScreen = document.getElementById('splashScreen');
    const mainApp = document.getElementById('mainApp');
    
    setTimeout(() => {
        splashScreen.classList.add('hidden');
        mainApp.style.opacity = '1';
    }, 3000);
}

// –°–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
function resetAddBalancePage() {
    document.getElementById('amountInput').value = '';
    document.querySelectorAll('.quick-amount-btn').forEach(btn => btn.classList.remove('active'));
    updatePaymentSummary(0);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ
function updatePaymentSummary(amount) {
    const parsedAmount = parseInt(amount) || 0;
    
    document.getElementById('summaryAmount').textContent = `${parsedAmount} ‚ÇΩ`;
    document.getElementById('summaryStars').innerHTML = `${parsedAmount} <img src="star.png" alt="Star" class="star-icon-inline">`;
    
    const payBtn = document.getElementById('confirmPaymentBtn');
    if (parsedAmount >= 10) {
        payBtn.disabled = false;
    } else {
        payBtn.disabled = true;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ Telegram Stars
async function createStarsInvoice(amount) {
    const payBtn = document.getElementById('confirmPaymentBtn');
    const originalText = payBtn.textContent;
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        payBtn.disabled = true;
        payBtn.textContent = '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...';
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
        const response = await fetch('/api/create-invoice', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                amount: amount,
                userId: user?.id || 'unknown'
            })
        });

        const data = await response.json();
        
        if (data.success && data.invoiceLink) {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
            tg.openInvoice(data.invoiceLink, (status) => {
                if (status === 'paid') {
                    // –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
                    tg.showAlert(`‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount} ‚ÇΩ!`);
                    updateUserBalance(amount);
                    resetAddBalancePage();
                    showPage('homePage');
                    
                    if (tg.HapticFeedback) {
                        tg.HapticFeedback.notificationOccurred('success');
                    }
                } else if (status === 'cancelled') {
                    tg.showAlert('‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
                    payBtn.disabled = false;
                    payBtn.textContent = originalText;
                } else if (status === 'failed') {
                    tg.showAlert('‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                    payBtn.disabled = false;
                    payBtn.textContent = originalText;
                }
            });
        } else {
            tg.showAlert('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            payBtn.disabled = false;
            payBtn.textContent = originalText;
        }
    } catch (error) {
        console.error('Error creating invoice:', error);
        tg.showAlert('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        payBtn.disabled = false;
        payBtn.textContent = originalText;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
function updateUserBalance(amount) {
    userBalance += amount;
    saveUserBalance();
    updateBalanceDisplay();
    console.log('‚úÖ Balance updated:', userBalance, '‚ÇΩ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
function openGiftModal() {
    const modal = document.getElementById('giftModalOverlay');
    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeGiftModal() {
    const modal = document.getElementById('giftModalOverlay');
    modal.classList.remove('active');
    document.body.style.overflow = '';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º splash screen
    hideSplashScreen();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    setTimeout(() => {
        init();
        applyTheme();
        console.log('Market Mini App initialized');
    }, 2500);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
tg.onEvent('themeChanged', () => {
    applyTheme();
});
